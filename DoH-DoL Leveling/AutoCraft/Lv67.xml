<?xml version="1.0" encoding="UTF-8"?>
<Profile>
<Name>Crafter Quests</Name>
<Order>

	<!-- Buy and use master books -->
	
    <RunCode Name="MasterBooks" />
	
	<!-- STRATEGY: We want to start by getting intermediate items done, because -->
	<!-- in the process of crafting intermediates we will generate a lot of leftover -->
	<!-- junk. We then want to sell off every raw gatherable that isn't used, -->
	<!-- and flatten all these intermediates so that they are NQ (we don't need HQ). -->
	<!-- Lisbeth will consolidate automatically. We want to do it in batches of three classes  -->
	<!-- at a time because even with this kind of consolidation there simply isn't enough -->
	<!-- inventory space to handle the main six classes altogether, even for only -->
	<!-- intermediates. So we'll run two classes at a time, starting with BSM/ARM, then CRP/GSM -->
	<!-- then LTW/WVR, then ALC, CUL individually. -->
	
	<!-- BSM, ARM -->
	<If Condition="(not IsQuestCompleted(68153)) or (not IsQuestCompleted(68132))">
	
	<!-- Craft Intermediates for BSM, ARM -->
	<RunCode Name="FirstWave" />
	
	<!-- Reduce HQ and merge -->
	<RunCode Name="FirstWaveNQify" />
    <AutoInventoryEquip/>
	
    <!-- Craft Final Product for BSM, ARM -->
	<RunCode Name="SecondWave" />
	
	<!-- Meld at Mutamix -->
	<If Condition="not IsQuestCompleted(66176)">
	<RunCode Name="FirstWaveMutamix" />
	</If>
	
	<!-- BSM quests -->
	<If Condition="not IsQuestCompleted(68153)">
	<LLoadProfile Path="../Quests/Blacksmith Class Quests.xml"/>
	</If>
	
	<!-- ARM quests -->
	<If Condition="not IsQuestCompleted(68132)">
	<LLoadProfile Path="../Quests/Armorer Class Quests.xml"/>
	</If>
	</If>
	<!-- END BSM, ARM -->
	
	<!-- Sell all junk so far -->
	<RunCode Name="SecondWaveSell" />
	
	<!-- CRP, GSM -->
	<If Condition="(not IsQuestCompleted(68137)) or (not IsQuestCompleted(67979))">
	
	<!-- Craft Intermediates for BSM, ARM -->
	<RunCode Name="ThirdWave" />
	<RunCode Name="ThirdWaveNQify" />
    <AutoInventoryEquip/>
	<RunCode Name="FourthWave" />
	
	<!-- Meld at Mutamix -->
	<If Condition="not IsQuestCompleted(66176)">
	<RunCode Name="ThirdWaveMutamix" />
	</If>
	
	<If Condition="not IsQuestCompleted(67979)">
	<LLoadProfile Path="../Quests/Carpenter Class Quests.xml"/>
	</If>
	
	<If Condition="not IsQuestCompleted(68137)">
	<LLoadProfile Path="../Quests/Goldsmith Class Quests.xml"/>
	</If>
	</If>
	
	<!-- Sell all junk so far -->
	<RunCode Name="FourthWaveSell" />
	<!-- END CRP, GSM -->
	
	<!-- LTW, WVR -->
	<If Condition="(not IsQuestCompleted(68147)) or (not IsQuestCompleted(67969))">
	<RunCode Name="FifthWave" />
	<RunCode Name="FifthWaveNQify" />
    <AutoInventoryEquip/>
	<RunCode Name="SixthWave" />
	
	<If Condition="not IsQuestCompleted(68147)">
	<LLoadProfile Path="../Quests/Leatherworker Class Quests.xml"/>
	</If>
	
	<If Condition="not IsQuestCompleted(67969)">
	<LLoadProfile Path="../Quests/Weaver Class Quests.xml"/>
	</If>
	</If>
	
	<!-- Sell all junk so far -->
	<RunCode Name="SixthWaveSell" />
	<!-- END LTW, WVR -->
	
	<!-- ALC, CUL -->
	<If Condition="(not IsQuestCompleted(68142)) or (not IsQuestCompleted(67974))">
	<RunCode Name="SeventhWave" />
    <AutoInventoryEquip/>
	
	<If Condition="not IsQuestCompleted(67974)">
	<LLoadProfile Path="../Quests/Alchemist Class Quests.xml"/>
	</If>

	<!-- Sell off quest rewards to make some space... -->
	<LLSellItem ItemIds="2471, 2485, 2473, 2475, 2489, 2477, 11939, 11896, 11897, 19523, 19533, 2497, 2511, 2499, 2501, 2515, 2503, 11943, 11900, 11901, 19524, 19534" Armory="true" />
	<LLDiscardItem ItemIds="2480, 2506" />

	<If Condition="not IsQuestCompleted(68142)">
	<LLoadProfile Path="../Quests/Culinarian Class Quests.xml"/>
	</If>
	</If>
	
	<!-- Sell all junk so far -->
	<RunCode Name="EighthWaveSell" />
	<!-- END ALC, CUL -->
		
	<RunCode Name="Logger" />
	<WaitTimer WaitTime="5"/>
		
    <LLoadProfile Path="../Start.xml"/>
</Order>
<CodeChunks>
<CodeChunk Name="SwitchCombatJob">
            <![CDATA[ 
            var Combat = Enumerable.Range(8, 11).Append(0).Append(36);
            var gearSets = GearsetManager.GearSets.Where(i => i.InUse && !Combat.Contains((int)i.Class)).ToList().OrderByDescending(i=> i.Gear.First().Item.ItemLevel);

            if (gearSets.Any())
            {
                gearSets.First().Activate();
                await Coroutine.Sleep(2000);
            }
            ]]>
        </CodeChunk>
<CodeChunk Name="MasterBooks">
    <![CDATA[
        // Settings
        const string ChunkName = "MasterBookMiniCheck";
        
        // Logging setup
        var log = new LlamaLibrary.Logging.LLogger(ChunkName, System.Windows.Media.Colors.Pink);
        
        // Create list to store unlockable items
        var unlockableItems = new System.Collections.Generic.List<uint>();
        
        // Check which items can be unlocked
        for (uint itemId = 12244; itemId <= 12250; itemId++)
        {
            if (LlamaLibrary.Helpers.UIState.CanUnlockItem(itemId))
            {
                unlockableItems.Add(itemId);
            }
        }
        
        // If there are items to unlock, create and execute Lisbeth order
        if (unlockableItems.Count > 0)
        {
            // Create order objects
            var orders = new System.Collections.Generic.List<object>();
            int id = 1;
            foreach (var item in unlockableItems)
            {
                orders.Add(new
                {
                    Id = id++,
                    Group = 1,
                    Item = item,
                    Amount = 1,
                    Enabled = true,
                    Type = "Exchange",
					AmountMode = "Restock"
                });
            }
            
            // Convert to JSON
            var json = Newtonsoft.Json.JsonConvert.SerializeObject(orders);
            
            // Get Lisbeth instance and execute orders
            var lisbeth = BotManager.Bots.FirstOrDefault(c => c.Name == "Lisbeth");
            if (lisbeth != null)
            {
                var lisbethObject = lisbeth.GetType().GetProperty("Lisbeth").GetValue(lisbeth);
                if (lisbethObject != null)
				{
					Func<Task> executeWithRetry = null;
					executeWithRetry = async () => {
						try 
						{
							var orderMethod = lisbethObject.GetType().GetMethod("ExecuteOrders");
							await (Task<bool>)orderMethod.Invoke(lisbethObject, new object[] { json, false });
						}
						catch (Exception ex) when (
							ex.ToString().Contains("HttpRequestException") || 
							ex.ToString().Contains("No response from the server") ||
							ex.ToString().Contains("Max sessions reached")
						)
						{
							// Log and stop gently
							ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Attempting to stop Lisbeth gently...");
							var stopGentlyMethod = lisbethObject.GetType().GetMethod("StopGently");
							await (Task)stopGentlyMethod.Invoke(lisbethObject, null);
							
							// Log and try to exit crafting
							ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Attempting to exit crafting state...");
							try 
							{
								var exitCraftingMethod = lisbethObject.GetType().GetMethod("ExitCrafting");
								await (Task<bool>)exitCraftingMethod.Invoke(lisbethObject, null);
							}
							catch {}
							
							// Log waiting period
							ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Waiting 5 minutes before attempting restart...");
							await Task.Delay(TimeSpan.FromMinutes(5));
							
							// Log and request restart
							ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Requesting Lisbeth to restart orders...");
							var restartMethod = lisbethObject.GetType().GetMethod("RequestRestart");
							restartMethod.Invoke(lisbethObject, new object[] { json });
							
							await executeWithRetry();
						}
					};
					await executeWithRetry();
				}
				
            }
			var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
			var profileDir = Path.GetDirectoryName(profilePath);
			var autoCraftPath = Path.Combine(profileDir, $"MasterBooks.xml");
			if (File.Exists(autoCraftPath))
			{
				await Coroutine.Sleep(500);
				ff14bot.NeoProfiles.NeoProfileManager.Load(autoCraftPath);
				await Coroutine.Sleep(1000);
			}
        }
        else
        {
            log.Information("Master Books already acquired.");
        }
    ]]>
</CodeChunk>

<CodeChunk Name="SetLisbethJson1">
<![CDATA[
    // Try to get profile path and construct relative path from there
    var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
    var profileDir = System.IO.Path.GetDirectoryName(profilePath);
    var jsonPath = System.IO.Path.Combine(profileDir, "../Lisbeth/Quest Items/V2Part1.json");
    
    var json = System.IO.File.ReadAllText(jsonPath);
    var lisbeth = BotManager.Bots.FirstOrDefault(c => c.Name == "Lisbeth");
    if (lisbeth != null)
    {
        var lisbethObject = lisbeth.GetType().GetProperty("Lisbeth").GetValue(lisbeth);
        if (lisbethObject != null)
				   {
					   Func<Task> executeWithRetry = null;
					   executeWithRetry = async () => {
						   try 
						   {
							   var orderMethod = lisbethObject.GetType().GetMethod("ExecuteOrders");
							   await (Task<bool>)orderMethod.Invoke(lisbethObject, new object[] { json, false });
						   }
						   catch (Exception ex) when (
							   ex.ToString().Contains("HttpRequestException") || 
							   ex.ToString().Contains("No response from the server") ||
							   ex.ToString().Contains("Max sessions reached")
						   )
						   {
							   // Log and stop gently
							   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Attempting to stop Lisbeth gently...");
							   var stopGentlyMethod = lisbethObject.GetType().GetMethod("StopGently");
							   await (Task)stopGentlyMethod.Invoke(lisbethObject, null);
							   
							   // Log and try to exit crafting
							   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Attempting to exit crafting state...");
							   try 
							   {
								   var exitCraftingMethod = lisbethObject.GetType().GetMethod("ExitCrafting");
								   await (Task<bool>)exitCraftingMethod.Invoke(lisbethObject, null);
							   }
							   catch {}
							   
							   // Log waiting period
							   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Waiting 5 minutes before attempting restart...");
							   await Task.Delay(TimeSpan.FromMinutes(5));
							   
							   // Log and request restart
							   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Requesting Lisbeth to restart orders...");
							   var restartMethod = lisbethObject.GetType().GetMethod("RequestRestart");
							   restartMethod.Invoke(lisbethObject, new object[] { json });
							   
							   await executeWithRetry();
						   }
					   };

					   await executeWithRetry();
				   }
    }
]]>
</CodeChunk>
<CodeChunk Name="Logger">
    <![CDATA[
        try
        {
            string workingDirectory = Directory.GetCurrentDirectory();
            string settingsPath = Path.Combine(workingDirectory, "Settings");
            string logFilePath = Path.Combine(settingsPath, $"autocraft.txt");
            
            File.AppendAllText(logFilePath, "craft67" + Environment.NewLine);
        }
        catch (Exception ex)
        {
        }
    ]]>
</CodeChunk>



<CodeChunk Name="FirstWave">
<![CDATA[
	try 
	{
		string workingDirectory = Directory.GetCurrentDirectory();
		string settingsPath = Path.Combine(workingDirectory, "Settings");
		string logFilePath = Path.Combine(settingsPath, "autocraft.txt");
		
		// Create the file if it doesn't exist
		if (!File.Exists(logFilePath))
		{
			File.WriteAllText(logFilePath, "");
		}
		
		// Read content and check for craft{level}
		string content = File.ReadAllText(logFilePath);
		if (!content.Contains($"firstwave"))
		{
		// If we get here, we need to run the profile
		var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
		var profileDir = Path.GetDirectoryName(profilePath);
		var autoCraftPath = Path.Combine(profileDir, $"FirstWave.xml");
		if (File.Exists(autoCraftPath))
		{
			await Coroutine.Sleep(500);
			ff14bot.NeoProfiles.NeoProfileManager.Load(autoCraftPath);
			await Coroutine.Sleep(1000);
		}
		}
	}
	catch
	{
	}
]]>
</CodeChunk>

<CodeChunk Name="FirstWaveNQify">
<![CDATA[
	try 
	{
		string workingDirectory = Directory.GetCurrentDirectory();
		string settingsPath = Path.Combine(workingDirectory, "Settings");
		string logFilePath = Path.Combine(settingsPath, "autocraft.txt");
		
		// Create the file if it doesn't exist
		if (!File.Exists(logFilePath))
		{
			File.WriteAllText(logFilePath, "");
		}
		
		// Read content and check for craft{level}
		string content = File.ReadAllText(logFilePath);
		if (!content.Contains($"NQify1"))
		{
		// If we get here, we need to run the profile
		var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
		var profileDir = Path.GetDirectoryName(profilePath);
		var autoCraftPath = Path.Combine(profileDir, $"FirstWaveNQify.xml");
		if (File.Exists(autoCraftPath))
		{
			await Coroutine.Sleep(500);
			ff14bot.NeoProfiles.NeoProfileManager.Load(autoCraftPath);
			await Coroutine.Sleep(1000);
		}
		}
	}
	catch
	{
	}
]]>
</CodeChunk>

<CodeChunk Name="FirstWaveMutamix">
<![CDATA[
	try 
	{
		string workingDirectory = Directory.GetCurrentDirectory();
		string settingsPath = Path.Combine(workingDirectory, "Settings");
		string logFilePath = Path.Combine(settingsPath, "autocraft.txt");
		
		// Create the file if it doesn't exist
		if (!File.Exists(logFilePath))
		{
			File.WriteAllText(logFilePath, "");
		}
		
		// Read content and check for craft{level}
		string content = File.ReadAllText(logFilePath);
		if (!content.Contains($"Mutamix1"))
		{
		// If we get here, we need to run the profile
		var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
		var profileDir = Path.GetDirectoryName(profilePath);
		var autoCraftPath = Path.Combine(profileDir, $"FirstWaveMutamix.xml");
		if (File.Exists(autoCraftPath))
		{
			await Coroutine.Sleep(500);
			ff14bot.NeoProfiles.NeoProfileManager.Load(autoCraftPath);
			await Coroutine.Sleep(1000);
		}
		}
	}
	catch
	{
	}
]]>
</CodeChunk>

<CodeChunk Name="SecondWave">
<![CDATA[
	try 
	{
		string workingDirectory = Directory.GetCurrentDirectory();
		string settingsPath = Path.Combine(workingDirectory, "Settings");
		string logFilePath = Path.Combine(settingsPath, "autocraft.txt");
		
		// Create the file if it doesn't exist
		if (!File.Exists(logFilePath))
		{
			File.WriteAllText(logFilePath, "");
		}
		
		// Read content and check for craft{level}
		string content = File.ReadAllText(logFilePath);
		if (!content.Contains($"secondwave"))
		{
		
		// If we get here, we need to run the profile
		var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
		var profileDir = Path.GetDirectoryName(profilePath);
		var autoCraftPath = Path.Combine(profileDir, $"SecondWave.xml");
		if (File.Exists(autoCraftPath))
		{
			await Coroutine.Sleep(500);
			ff14bot.NeoProfiles.NeoProfileManager.Load(autoCraftPath);
			await Coroutine.Sleep(1000);
		}
		}
	}
	catch
	{
	}
]]>
</CodeChunk>

<CodeChunk Name="SecondWaveSell">
<![CDATA[
	try 
	{
		string workingDirectory = Directory.GetCurrentDirectory();
		string settingsPath = Path.Combine(workingDirectory, "Settings");
		string logFilePath = Path.Combine(settingsPath, "autocraft.txt");
		
		// Create the file if it doesn't exist
		if (!File.Exists(logFilePath))
		{
			File.WriteAllText(logFilePath, "");
		}
		
		// Read content and check for craft{level}
		string content = File.ReadAllText(logFilePath);
		if (!content.Contains($"sell2"))
		{
		
		// If we get here, we need to run the profile
		var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
		var profileDir = Path.GetDirectoryName(profilePath);
		var autoCraftPath = Path.Combine(profileDir, $"SecondWaveSell.xml");
		if (File.Exists(autoCraftPath))
		{
			await Coroutine.Sleep(500);
			ff14bot.NeoProfiles.NeoProfileManager.Load(autoCraftPath);
			await Coroutine.Sleep(1000);
		}
		}
	}
	catch
	{
	}
]]>
</CodeChunk>

<CodeChunk Name="ThirdWave">
<![CDATA[
	try 
	{
		string workingDirectory = Directory.GetCurrentDirectory();
		string settingsPath = Path.Combine(workingDirectory, "Settings");
		string logFilePath = Path.Combine(settingsPath, "autocraft.txt");
		
		// Create the file if it doesn't exist
		if (!File.Exists(logFilePath))
		{
			File.WriteAllText(logFilePath, "");
		}
		
		// Read content and check for craft{level}
		string content = File.ReadAllText(logFilePath);
		if (!content.Contains($"thirdwave"))
		{
		// If we get here, we need to run the profile
		var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
		var profileDir = Path.GetDirectoryName(profilePath);
		var autoCraftPath = Path.Combine(profileDir, $"ThirdWave.xml");
		if (File.Exists(autoCraftPath))
		{
			await Coroutine.Sleep(500);
			ff14bot.NeoProfiles.NeoProfileManager.Load(autoCraftPath);
			await Coroutine.Sleep(1000);
		}
		}
	}
	catch
	{
	}
]]>
</CodeChunk>

<CodeChunk Name="ThirdWaveNQify">
<![CDATA[
	try 
	{
		string workingDirectory = Directory.GetCurrentDirectory();
		string settingsPath = Path.Combine(workingDirectory, "Settings");
		string logFilePath = Path.Combine(settingsPath, "autocraft.txt");
		
		// Create the file if it doesn't exist
		if (!File.Exists(logFilePath))
		{
			File.WriteAllText(logFilePath, "");
		}
		
		// Read content and check for craft{level}
		string content = File.ReadAllText(logFilePath);
		if (!content.Contains($"NQify3"))
		{
		// If we get here, we need to run the profile
		var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
		var profileDir = Path.GetDirectoryName(profilePath);
		var autoCraftPath = Path.Combine(profileDir, $"ThirdWaveNQify.xml");
		if (File.Exists(autoCraftPath))
		{
			await Coroutine.Sleep(500);
			ff14bot.NeoProfiles.NeoProfileManager.Load(autoCraftPath);
			await Coroutine.Sleep(1000);
		}
		}
	}
	catch
	{
	}
]]>
</CodeChunk>

<CodeChunk Name="ThirdWaveMutamix">
<![CDATA[
	try 
	{
		string workingDirectory = Directory.GetCurrentDirectory();
		string settingsPath = Path.Combine(workingDirectory, "Settings");
		string logFilePath = Path.Combine(settingsPath, "autocraft.txt");
		
		// Create the file if it doesn't exist
		if (!File.Exists(logFilePath))
		{
			File.WriteAllText(logFilePath, "");
		}
		
		// Read content and check for craft{level}
		string content = File.ReadAllText(logFilePath);
		if (!content.Contains($"Mutamix3"))
		{
		// If we get here, we need to run the profile
		var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
		var profileDir = Path.GetDirectoryName(profilePath);
		var autoCraftPath = Path.Combine(profileDir, $"ThirdWaveMutamix.xml");
		if (File.Exists(autoCraftPath))
		{
			await Coroutine.Sleep(500);
			ff14bot.NeoProfiles.NeoProfileManager.Load(autoCraftPath);
			await Coroutine.Sleep(1000);
		}
		}
	}
	catch
	{
	}
]]>
</CodeChunk>

<CodeChunk Name="FourthWave">
<![CDATA[
	try 
	{
		string workingDirectory = Directory.GetCurrentDirectory();
		string settingsPath = Path.Combine(workingDirectory, "Settings");
		string logFilePath = Path.Combine(settingsPath, "autocraft.txt");
		
		// Create the file if it doesn't exist
		if (!File.Exists(logFilePath))
		{
			File.WriteAllText(logFilePath, "");
		}
		
		// Read content and check for craft{level}
		string content = File.ReadAllText(logFilePath);
		if (!content.Contains($"fourthwave"))
		{
		// If we get here, we need to run the profile
		var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
		var profileDir = Path.GetDirectoryName(profilePath);
		var autoCraftPath = Path.Combine(profileDir, $"FourthWave.xml");
		if (File.Exists(autoCraftPath))
		{
			await Coroutine.Sleep(500);
			ff14bot.NeoProfiles.NeoProfileManager.Load(autoCraftPath);
			await Coroutine.Sleep(1000);
		}
		}
	}
	catch
	{
	}
]]>
</CodeChunk>

<CodeChunk Name="FourthWaveSell">
<![CDATA[
	try 
	{
		string workingDirectory = Directory.GetCurrentDirectory();
		string settingsPath = Path.Combine(workingDirectory, "Settings");
		string logFilePath = Path.Combine(settingsPath, "autocraft.txt");
		
		// Create the file if it doesn't exist
		if (!File.Exists(logFilePath))
		{
			File.WriteAllText(logFilePath, "");
		}
		
		// Read content and check for craft{level}
		string content = File.ReadAllText(logFilePath);
		if (!content.Contains($"sell4"))
		{
		// If we get here, we need to run the profile
		var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
		var profileDir = Path.GetDirectoryName(profilePath);
		var autoCraftPath = Path.Combine(profileDir, $"FourthWaveSell.xml");
		if (File.Exists(autoCraftPath))
		{
			await Coroutine.Sleep(500);
			ff14bot.NeoProfiles.NeoProfileManager.Load(autoCraftPath);
			await Coroutine.Sleep(1000);
		}
		}
	}
	catch
	{
	}
]]>
</CodeChunk>

<CodeChunk Name="FifthWave">
<![CDATA[
	try 
	{
		string workingDirectory = Directory.GetCurrentDirectory();
		string settingsPath = Path.Combine(workingDirectory, "Settings");
		string logFilePath = Path.Combine(settingsPath, "autocraft.txt");
		
		// Create the file if it doesn't exist
		if (!File.Exists(logFilePath))
		{
			File.WriteAllText(logFilePath, "");
		}
		
		// Read content and check for craft{level}
		string content = File.ReadAllText(logFilePath);
		if (!content.Contains($"fifthwave"))
		{
		// If we get here, we need to run the profile
		var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
		var profileDir = Path.GetDirectoryName(profilePath);
		var autoCraftPath = Path.Combine(profileDir, $"FifthWave.xml");
		if (File.Exists(autoCraftPath))
		{
			await Coroutine.Sleep(500);
			ff14bot.NeoProfiles.NeoProfileManager.Load(autoCraftPath);
			await Coroutine.Sleep(1000);
		}
		}
	}
	catch
	{
	}
]]>
</CodeChunk>

<CodeChunk Name="FifthWaveNQify">
<![CDATA[
	try 
	{
		string workingDirectory = Directory.GetCurrentDirectory();
		string settingsPath = Path.Combine(workingDirectory, "Settings");
		string logFilePath = Path.Combine(settingsPath, "autocraft.txt");
		
		// Create the file if it doesn't exist
		if (!File.Exists(logFilePath))
		{
			File.WriteAllText(logFilePath, "");
		}
		
		// Read content and check for craft{level}
		string content = File.ReadAllText(logFilePath);
		if (!content.Contains($"NQify5"))
		{
		// If we get here, we need to run the profile
		var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
		var profileDir = Path.GetDirectoryName(profilePath);
		var autoCraftPath = Path.Combine(profileDir, $"FifthWaveNQify.xml");
		if (File.Exists(autoCraftPath))
		{
			await Coroutine.Sleep(500);
			ff14bot.NeoProfiles.NeoProfileManager.Load(autoCraftPath);
			await Coroutine.Sleep(1000);
		}
		}
	}
	catch
	{
	}
]]>
</CodeChunk>

<CodeChunk Name="SixthWave">
<![CDATA[
	try 
	{
		string workingDirectory = Directory.GetCurrentDirectory();
		string settingsPath = Path.Combine(workingDirectory, "Settings");
		string logFilePath = Path.Combine(settingsPath, "autocraft.txt");
		
		// Create the file if it doesn't exist
		if (!File.Exists(logFilePath))
		{
			File.WriteAllText(logFilePath, "");
		}
		
		// Read content and check for craft{level}
		string content = File.ReadAllText(logFilePath);
		if (!content.Contains($"sixthwave"))
		{
		// If we get here, we need to run the profile
		var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
		var profileDir = Path.GetDirectoryName(profilePath);
		var autoCraftPath = Path.Combine(profileDir, $"SixthWave.xml");
		if (File.Exists(autoCraftPath))
		{
			await Coroutine.Sleep(500);
			ff14bot.NeoProfiles.NeoProfileManager.Load(autoCraftPath);
			await Coroutine.Sleep(1000);
		}
		}
	}
	catch
	{
	}
]]>
</CodeChunk>

<CodeChunk Name="SixthWaveSell">
<![CDATA[
	try 
	{
		string workingDirectory = Directory.GetCurrentDirectory();
		string settingsPath = Path.Combine(workingDirectory, "Settings");
		string logFilePath = Path.Combine(settingsPath, "autocraft.txt");
		
		// Create the file if it doesn't exist
		if (!File.Exists(logFilePath))
		{
			File.WriteAllText(logFilePath, "");
		}
		
		// Read content and check for craft{level}
		string content = File.ReadAllText(logFilePath);
		if (!content.Contains($"sell6"))
		{
		// If we get here, we need to run the profile
		var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
		var profileDir = Path.GetDirectoryName(profilePath);
		var autoCraftPath = Path.Combine(profileDir, $"SixthWaveSell.xml");
		if (File.Exists(autoCraftPath))
		{
			await Coroutine.Sleep(500);
			ff14bot.NeoProfiles.NeoProfileManager.Load(autoCraftPath);
			await Coroutine.Sleep(1000);
		}
		}
	}
	catch
	{
	}
]]>
</CodeChunk>

<CodeChunk Name="SeventhWave">
<![CDATA[
	try 
	{
		string workingDirectory = Directory.GetCurrentDirectory();
		string settingsPath = Path.Combine(workingDirectory, "Settings");
		string logFilePath = Path.Combine(settingsPath, "autocraft.txt");
		
		// Create the file if it doesn't exist
		if (!File.Exists(logFilePath))
		{
			File.WriteAllText(logFilePath, "");
		}
		
		// Read content and check for craft{level}
		string content = File.ReadAllText(logFilePath);
		if (!content.Contains($"seventhwave"))
		{
		// If we get here, we need to run the profile
		var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
		var profileDir = Path.GetDirectoryName(profilePath);
		var autoCraftPath = Path.Combine(profileDir, $"SeventhWave.xml");
		if (File.Exists(autoCraftPath))
		{
			await Coroutine.Sleep(500);
			ff14bot.NeoProfiles.NeoProfileManager.Load(autoCraftPath);
			await Coroutine.Sleep(1000);
		}
		}
	}
	catch
	{
	}
]]>
</CodeChunk>

<CodeChunk Name="EighthWaveSell">
<![CDATA[
	try 
	{
		string workingDirectory = Directory.GetCurrentDirectory();
		string settingsPath = Path.Combine(workingDirectory, "Settings");
		string logFilePath = Path.Combine(settingsPath, "autocraft.txt");
		
		// Create the file if it doesn't exist
		if (!File.Exists(logFilePath))
		{
			File.WriteAllText(logFilePath, "");
		}
		
		// Read content and check for craft{level}
		string content = File.ReadAllText(logFilePath);
		if (!content.Contains($"sell8"))
		{
		// If we get here, we need to run the profile
		var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
		var profileDir = Path.GetDirectoryName(profilePath);
		var autoCraftPath = Path.Combine(profileDir, $"EighthWaveSell.xml");
		if (File.Exists(autoCraftPath))
		{
			await Coroutine.Sleep(500);
			ff14bot.NeoProfiles.NeoProfileManager.Load(autoCraftPath);
			await Coroutine.Sleep(1000);
		}
		}
	}
	catch
	{
	}
]]>
</CodeChunk>

</CodeChunks>
</Profile>