<?xml version="1.0" encoding="UTF-8"?>
<Profile>
<Name>Crafting Lv100 Gear</Name>
<Order>
    <RunCode Name="SwitchCombatJob"/>
    <If Condition="not ((HqHasAtLeast(43267, 1)) and (HqHasAtLeast(43263, 1)) and (HqHasAtLeast(43274, 1)) and (HqHasAtLeast(43264, 1)) and (HqHasAtLeast(43275, 1)) and (HqHasAtLeast(43266, 1)) and (HqHasAtLeast(43277, 1)) and (HqHasAtLeast(43265, 1)) and (HqHasAtLeast(43276, 1)) and (HqHasAtLeast(43268, 1)) and (HqHasAtLeast(43279, 1)) and (HqHasAtLeast(43269, 1)) and (HqHasAtLeast(43281, 1)) and (HqHasAtLeast(43314, 1)) and (HqHasAtLeast(43315, 1)) and (HqHasAtLeast(43316, 1)) and (HqHasAtLeast(43317, 1)) and (HqHasAtLeast(43318, 1)) and (HqHasAtLeast(43340, 1)) and (HqHasAtLeast(43341, 1)) and (HqHasAtLeast(43342, 1)) and (HqHasAtLeast(43343, 2)) and (HqHasAtLeast(43282, 1)) and (HqHasAtLeast(43283, 1)) and (HqHasAtLeast(43344, 1)) and (HqHasAtLeast(43345, 1)) and (HqHasAtLeast(43346, 1)) and (HqHasAtLeast(43347, 2)) and (HqHasAtLeast(43278, 1)) and (HqHasAtLeast(43280, 1)) and (HqHasAtLeast(43270, 1)))">
    <RunCode Name="SetLisbethJson" />
    </If>
    <AutoInventoryEquip/>

    <While Condition="(Core.Me.Levels[ClassJobType.Botanist] &lt; 100) or (Core.Me.Levels[ClassJobType.Miner] &lt; 100)">
			<LogMessage Message="Starting the Grind to Level 100."/>
			<If Condition="not Core.Me.HasAura(46)">
				<UseInventoryItem ItemID="12668"/>
			</If>
			<WaitTimer WaitTime="2"/>
			<RunCode Name="DTFolklore"/>
			<WaitTimer WaitTime="5"/>
			<UseUnlockables />
		</While>


    <RunCode Name="SetLisbethJson2" />
    <LogMessage Message="Crafted Lv100 Gear! Unlocking Master Books now..."/>
    <AutoInventoryEquip/>

    <!-- Buy and use master books -->
    <RunCode Name="MasterBooks" />

    <RunCode Name="Logger" />

    <WaitTimer WaitTime="5"/>
    <LLoadProfile Path="../Start.xml"/>
	<WaitTimer WaitTime="5"/>
</Order>
<CodeChunks>
<CodeChunk Name="SwitchCombatJob">
            <![CDATA[ 
            var Combat = Enumerable.Range(8, 11).Append(0).Append(36);
            var gearSets = GearsetManager.GearSets.Where(i => i.InUse && !Combat.Contains((int)i.Class)).ToList().OrderByDescending(i=> i.Gear.First().Item.ItemLevel);

            if (gearSets.Any())
            {
                gearSets.First().Activate();
                await Coroutine.Sleep(2000);
            }
            ]]>
        </CodeChunk>
        <CodeChunk Name="DTFolklore">
    <![CDATA[

        // Settings
        const string ChunkName = "FolkloreMiniCheck";
        
        // Logging setup
        var log = new LlamaLibrary.Logging.LLogger(ChunkName, System.Windows.Media.Colors.Pink);
        
        // Create list to store unlockable items
        var unlockableItems = new System.Collections.Generic.List<uint>();

		// Define potentially unlockable items
		var potentialItems = new System.Collections.Generic.List<uint>()
		{
			43878, 43879, 43880, 43881, 43882, 43883,
			12238, 12239, 12240, 12698, 12699, 12700,
			17838, 17839, 17840, 17841,
			26808, 26809,
			36598, 36600, 36601, 36602, 36604, 36605
		};
        
        // Check which items can be unlocked
        foreach(var itemId in potentialItems)
        {
            if (LlamaLibrary.Helpers.UIState.CanUnlockItem(itemId))
            {
                unlockableItems.Add(itemId);
            }
        }

		// Get Lisbeth instance
        var lisbeth = BotManager.Bots.FirstOrDefault(c => c.Name == "Lisbeth");
        
		// Create order objects
		var orders = new System.Collections.Generic.List<object>();
		int id = 1;
		if (unlockableItems.Count > 0)
		{
			foreach (var item in unlockableItems)
			{	
				orders.Add(new
				{
					Id = id++,
					Group = 1,
					Item = item,
					Amount = 1,
					Enabled = true,
					Type = "Exchange",
					AmountMode = "Restock"
				});

			}
		}

		orders.Add(new
			{
				Id = id++,
				Group = 2,
				Item = 12669,
				Amount = 100,
				Enabled = true,
				Type = "Exchange",
				AmountMode = "Absolute"
			});
		
		// Convert to JSON
		var json = Newtonsoft.Json.JsonConvert.SerializeObject(orders);
		
		
		if (lisbeth != null)
		{
			var lisbethObject = lisbeth.GetType().GetProperty("Lisbeth").GetValue(lisbeth);
			if (lisbethObject != null)
			{
				Func<Task> executeWithRetry = null;
				executeWithRetry = async () => {
					try 
					{
						var orderMethod = lisbethObject.GetType().GetMethod("ExecuteOrders");
						await (Task<bool>)orderMethod.Invoke(lisbethObject, new object[] { json, false });
					}
					catch (Exception ex) when (
						ex.ToString().Contains("HttpRequestException") || 
						ex.ToString().Contains("No response from the server") ||
						ex.ToString().Contains("Max sessions reached")
					)
					{
						// Log and stop gently
						ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Attempting to stop Lisbeth gently...");
						var stopGentlyMethod = lisbethObject.GetType().GetMethod("StopGently");
						await (Task)stopGentlyMethod.Invoke(lisbethObject, null);
						
						// Log and try to exit crafting
						ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Attempting to exit crafting state...");
						try 
						{
							var exitCraftingMethod = lisbethObject.GetType().GetMethod("ExitCrafting");
							await (Task<bool>)exitCraftingMethod.Invoke(lisbethObject, null);
						}
						catch {}
						
						// Log waiting period
						ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Waiting 5 minutes before attempting restart...");
						await Task.Delay(TimeSpan.FromMinutes(5));
						
						// Log and request restart
						ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Requesting Lisbeth to restart orders...");
						var restartMethod = lisbethObject.GetType().GetMethod("RequestRestart");
						restartMethod.Invoke(lisbethObject, new object[] { json });
						
						await executeWithRetry();
					}
				};

				await executeWithRetry();
			}
			
		}
    ]]>
	</CodeChunk>
<CodeChunk Name="MasterBooks">
    <![CDATA[
        // Settings
        const string ChunkName = "MasterBookMiniCheck";
        
        // Logging setup
        var log = new LlamaLibrary.Logging.LLogger(ChunkName, System.Windows.Media.Colors.Pink);
        
        // Create list to store unlockable items
        var unlockableItems = new System.Collections.Generic.List<uint>();
        
        // Check which items can be unlocked (Master 11s)
        for (uint itemId = 44123; itemId <= 44130; itemId++)
        {
            if (LlamaLibrary.Helpers.UIState.CanUnlockItem(itemId))
            {
                unlockableItems.Add(itemId);
            }
        }
        
        // If there are items to unlock, create and execute Lisbeth order
        if (unlockableItems.Count > 0)
        {
            // Create order objects
            var orders = new System.Collections.Generic.List<object>();
            int id = 1;
            foreach (var item in unlockableItems)
            {
                orders.Add(new
                {
                    Id = id++,
                    Group = 1,
                    Item = item,
                    Amount = 1,
                    Enabled = true,
                    Type = "Exchange",
                    AmountMode = "Restock"
                });
            }
            
            // Convert to JSON
            var json = Newtonsoft.Json.JsonConvert.SerializeObject(orders);
            
            // Get Lisbeth instance and execute orders
            var lisbeth = BotManager.Bots.FirstOrDefault(c => c.Name == "Lisbeth");
            if (lisbeth != null)
            {
                var lisbethObject = lisbeth.GetType().GetProperty("Lisbeth").GetValue(lisbeth);
                if (lisbethObject != null)
				   {
					   Func<Task> executeWithRetry = null;
					   executeWithRetry = async () => {
						   try 
						   {
							   var orderMethod = lisbethObject.GetType().GetMethod("ExecuteOrders");
							   await (Task<bool>)orderMethod.Invoke(lisbethObject, new object[] { json, false });
						   }
						   catch (Exception ex) when (
							   ex.ToString().Contains("HttpRequestException") || 
							   ex.ToString().Contains("No response from the server") ||
							   ex.ToString().Contains("Max sessions reached")
						   )
						   {
							   // Log and stop gently
							   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Attempting to stop Lisbeth gently...");
							   var stopGentlyMethod = lisbethObject.GetType().GetMethod("StopGently");
							   await (Task)stopGentlyMethod.Invoke(lisbethObject, null);
							   
							   // Log and try to exit crafting
							   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Attempting to exit crafting state...");
							   try 
							   {
								   var exitCraftingMethod = lisbethObject.GetType().GetMethod("ExitCrafting");
								   await (Task<bool>)exitCraftingMethod.Invoke(lisbethObject, null);
							   }
							   catch {}
							   
							   // Log waiting period
							   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Waiting 5 minutes before attempting restart...");
							   await Task.Delay(TimeSpan.FromMinutes(5));
							   
							   // Log and request restart
							   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Requesting Lisbeth to restart orders...");
							   var restartMethod = lisbethObject.GetType().GetMethod("RequestRestart");
							   restartMethod.Invoke(lisbethObject, new object[] { json });
							   
							   await executeWithRetry();
						   }
					   };

					   await executeWithRetry();
				   }
				var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
				var profileDir = Path.GetDirectoryName(profilePath);
				var autoCraftPath = Path.Combine(profileDir, $"Autocraft/MasterBooksXI.xml");
				if (File.Exists(autoCraftPath))
				{
					await Coroutine.Sleep(500);
					ff14bot.NeoProfiles.NeoProfileManager.Load(autoCraftPath);
					await Coroutine.Sleep(1000);
				}
            }
        }
        else
        {
            log.Information("Master Books already acquired.");
        }
    ]]>
</CodeChunk>
<CodeChunk Name="SetLisbethJson">
<![CDATA[
    // Try to get profile path and construct relative path from there
    var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
    var profileDir = System.IO.Path.GetDirectoryName(profilePath);
    var jsonPath = System.IO.Path.Combine(profileDir, "../Lisbeth/GearSets/GEAR100-1.json");
    
    var json = System.IO.File.ReadAllText(jsonPath);
    var lisbeth = BotManager.Bots.FirstOrDefault(c => c.Name == "Lisbeth");
    if (lisbeth != null)
   {
       var lisbethObject = lisbeth.GetType().GetProperty("Lisbeth").GetValue(lisbeth);
       if (lisbethObject != null)
       {
           Func<Task> executeWithRetry = null;
           executeWithRetry = async () => {
               try 
               {
                   var orderMethod = lisbethObject.GetType().GetMethod("ExecuteOrders");
                   await (Task<bool>)orderMethod.Invoke(lisbethObject, new object[] { json, false });
               }
               catch (Exception ex) when (
                   ex.ToString().Contains("HttpRequestException") || 
                   ex.ToString().Contains("No response from the server") ||
                   ex.ToString().Contains("Max sessions reached")
               )
               {
                   // Log and stop gently
                   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Attempting to stop Lisbeth gently...");
                   var stopGentlyMethod = lisbethObject.GetType().GetMethod("StopGently");
                   await (Task)stopGentlyMethod.Invoke(lisbethObject, null);
                   
                   // Log and try to exit crafting
                   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Attempting to exit crafting state...");
                   try 
                   {
                       var exitCraftingMethod = lisbethObject.GetType().GetMethod("ExitCrafting");
                       await (Task<bool>)exitCraftingMethod.Invoke(lisbethObject, null);
                   }
                   catch {}
                   
                   // Log waiting period
                   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Waiting 5 minutes before attempting restart...");
                   await Task.Delay(TimeSpan.FromMinutes(5));
                   
                   // Log and request restart
                   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Requesting Lisbeth to restart orders...");
                   var restartMethod = lisbethObject.GetType().GetMethod("RequestRestart");
                   restartMethod.Invoke(lisbethObject, new object[] { json });
                   
                   await executeWithRetry();
               }
           };

           await executeWithRetry();
       }
   }
]]>
</CodeChunk>

<CodeChunk Name="SetLisbethJson2">
<![CDATA[
    // Try to get profile path and construct relative path from there
    var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
    var profileDir = System.IO.Path.GetDirectoryName(profilePath);
    var jsonPath = System.IO.Path.Combine(profileDir, "../Lisbeth/GearSets/GEAR100-2.json");
    
    var json = System.IO.File.ReadAllText(jsonPath);
    var lisbeth = BotManager.Bots.FirstOrDefault(c => c.Name == "Lisbeth");
    if (lisbeth != null)
   {
       var lisbethObject = lisbeth.GetType().GetProperty("Lisbeth").GetValue(lisbeth);
       if (lisbethObject != null)
       {
           Func<Task> executeWithRetry = null;
           executeWithRetry = async () => {
               try 
               {
                   var orderMethod = lisbethObject.GetType().GetMethod("ExecuteOrders");
                   await (Task<bool>)orderMethod.Invoke(lisbethObject, new object[] { json, false });
               }
               catch (Exception ex) when (
                   ex.ToString().Contains("HttpRequestException") || 
                   ex.ToString().Contains("No response from the server") ||
                   ex.ToString().Contains("Max sessions reached")
               )
               {
                   // Log and stop gently
                   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Attempting to stop Lisbeth gently...");
                   var stopGentlyMethod = lisbethObject.GetType().GetMethod("StopGently");
                   await (Task)stopGentlyMethod.Invoke(lisbethObject, null);
                   
                   // Log and try to exit crafting
                   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Attempting to exit crafting state...");
                   try 
                   {
                       var exitCraftingMethod = lisbethObject.GetType().GetMethod("ExitCrafting");
                       await (Task<bool>)exitCraftingMethod.Invoke(lisbethObject, null);
                   }
                   catch {}
                   
                   // Log waiting period
                   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Waiting 5 minutes before attempting restart...");
                   await Task.Delay(TimeSpan.FromMinutes(5));
                   
                   // Log and request restart
                   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Requesting Lisbeth to restart orders...");
                   var restartMethod = lisbethObject.GetType().GetMethod("RequestRestart");
                   restartMethod.Invoke(lisbethObject, new object[] { json });
                   
                   await executeWithRetry();
               }
           };

           await executeWithRetry();
       }
   }
]]>
</CodeChunk>

<CodeChunk Name="Logger">
    <![CDATA[
        try
        {
            string workingDirectory = Directory.GetCurrentDirectory();
            string settingsPath = Path.Combine(workingDirectory, "Settings");
            string logFilePath = Path.Combine(settingsPath, $"autocraft.txt");
            
            File.AppendAllText(logFilePath, "craft100" + Environment.NewLine);
        }
        catch (Exception ex)
        {
        }
    ]]>
</CodeChunk>
</CodeChunks>
</Profile>