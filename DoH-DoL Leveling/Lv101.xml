<?xml version="1.0" encoding="UTF-8"?>
<Profile>
<Name>Crafting Everseeker Gear + Melds</Name>
<Order>

    <RunCode Name="autosellcheck101" />
	
    <!-- Check we got master books... -->
    <RunCode Name="MasterBooks" />
	<!-- Check we got Folklore... -->
    <RunCode Name="DTFolklore" />

	<!-- Use folklore books... -->
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="43878"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="43879"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="43880"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="43881"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="43882"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="43883"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="12238"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="12239"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="12240"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="12698"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="12699"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="12700"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="17838"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="17839"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="17840"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="17841"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="26808"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="26809"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="36598"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="36600"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="36601"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="36602"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="36604"/>
	<WaitTimer WaitTime="5"/>
	<UseInventoryItem ItemID="36605"/>
	<WaitTimer WaitTime="5"/>
	
    <RunCode Name="SetLisbethJson1" />

	<RunCode Name="autosellcheck102" />
</Order>
<CodeChunks>
<CodeChunk Name="MasterBooks">
    <![CDATA[
        // Settings
        const string ChunkName = "MasterBookMiniCheck";
        
        // Logging setup
        var log = new LlamaLibrary.Logging.LLogger(ChunkName, System.Windows.Media.Colors.Pink);
        
        // Create list to store unlockable items
        var unlockableItems = new System.Collections.Generic.List<uint>();
        
        // Check which items can be unlocked
        for (uint itemId = 44123; itemId <= 44130; itemId++)
        {
            if (LlamaLibrary.Helpers.UIState.CanUnlockItem(itemId))
            {
                unlockableItems.Add(itemId);
            }
        }
        
        // If there are items to unlock, create and execute Lisbeth order
        if (unlockableItems.Count > 0)
        {
            // Create order objects
            var orders = new System.Collections.Generic.List<object>();
            int id = 1;
            foreach (var item in unlockableItems)
            {
                orders.Add(new
                {
                    Id = id++,
                    Group = 1,
                    Item = item,
                    Amount = 1,
                    Enabled = true,
                    Type = "Exchange"
                });
            }
            
            // Convert to JSON
            var json = Newtonsoft.Json.JsonConvert.SerializeObject(orders);
            
            // Get Lisbeth instance and execute orders
            var lisbeth = BotManager.Bots.FirstOrDefault(c => c.Name == "Lisbeth");
            if (lisbeth != null)
            {
                var lisbethObject = lisbeth.GetType().GetProperty("Lisbeth").GetValue(lisbeth);
                if (lisbethObject != null)
				   {
					   Func<Task> executeWithRetry = null;
					   executeWithRetry = async () => {
						   try 
						   {
							   var orderMethod = lisbethObject.GetType().GetMethod("ExecuteOrders");
							   await (Task<bool>)orderMethod.Invoke(lisbethObject, new object[] { json, false });
						   }
						   catch (Exception ex) when (
							   ex.ToString().Contains("HttpRequestException") || 
							   ex.ToString().Contains("No response from the server") ||
							   ex.ToString().Contains("Max sessions reached")
						   )
						   {
							   // Log and stop gently
							   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Attempting to stop Lisbeth gently...");
							   var stopGentlyMethod = lisbethObject.GetType().GetMethod("StopGently");
							   await (Task)stopGentlyMethod.Invoke(lisbethObject, null);
							   
							   // Log and try to exit crafting
							   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Attempting to exit crafting state...");
							   try 
							   {
								   var exitCraftingMethod = lisbethObject.GetType().GetMethod("ExitCrafting");
								   await (Task<bool>)exitCraftingMethod.Invoke(lisbethObject, null);
							   }
							   catch {}
							   
							   // Log waiting period
							   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Waiting 5 minutes before attempting restart...");
							   await Task.Delay(TimeSpan.FromMinutes(5));
							   
							   // Log and request restart
							   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Requesting Lisbeth to restart orders...");
							   var restartMethod = lisbethObject.GetType().GetMethod("RequestRestart");
							   restartMethod.Invoke(lisbethObject, new object[] { json });
							   
							   await executeWithRetry();
						   }
					   };

					   await executeWithRetry();
				   }
				var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
				var profileDir = Path.GetDirectoryName(profilePath);
				var autoCraftPath = Path.Combine(profileDir, $"Autocraft/MasterBooksXI.xml");
				if (File.Exists(autoCraftPath))
				{
					await Coroutine.Sleep(500);
					ff14bot.NeoProfiles.NeoProfileManager.Load(autoCraftPath);
					await Coroutine.Sleep(1000);
				}
            }
        }
        else
        {
            log.Information("Master Books already acquired.");
        }
    ]]>
</CodeChunk>
<CodeChunk Name="DTFolklore">
    <![CDATA[

        // Settings
        const string ChunkName = "FolkloreMiniCheck";
        
        // Logging setup
        var log = new LlamaLibrary.Logging.LLogger(ChunkName, System.Windows.Media.Colors.Pink);
        
        // Create list to store unlockable items
        var unlockableItems = new System.Collections.Generic.List<uint>();

		// Define potentially unlockable items
		var potentialItems = new System.Collections.Generic.List<uint>()
		{
			43878, 43879, 43880, 43881, 43882, 43883,
			12238, 12239, 12240, 12698, 12699, 12700,
			17838, 17839, 17840, 17841,
			26808, 26809,
			36598, 36600, 36601, 36602, 36604, 36605
		};
        
        // Check which items can be unlocked
        foreach(var itemId in potentialItems)
        {
            if (LlamaLibrary.Helpers.UIState.CanUnlockItem(itemId))
            {
                unlockableItems.Add(itemId);
            }
        }

		// Get Lisbeth instance
        var lisbeth = BotManager.Bots.FirstOrDefault(c => c.Name == "Lisbeth");

		var heavensward = 0;
		var stormblood = 0;
		var shadowbringers = 0;
		var endwalker = 0;
        
        // If there are items to unlock, create and execute Lisbeth order
        if (unlockableItems.Count > 0)
        {
            // Create order objects
            var orders = new System.Collections.Generic.List<object>();
            int id = 1;
            foreach (var item in unlockableItems)
            {	
				orders.Add(new
				{
					Id = id++,
					Group = 1,
					Item = item,
					Amount = 1,
					Enabled = true,
					Type = "Exchange",
					AmountMode = "Restock"
				});

            }
            
            // Convert to JSON
            var json = Newtonsoft.Json.JsonConvert.SerializeObject(orders);
            
            
            if (lisbeth != null)
            {
                var lisbethObject = lisbeth.GetType().GetProperty("Lisbeth").GetValue(lisbeth);
                if (lisbethObject != null)
				   {
					   Func<Task> executeWithRetry = null;
					   executeWithRetry = async () => {
						   try 
						   {
							   var orderMethod = lisbethObject.GetType().GetMethod("ExecuteOrders");
							   await (Task<bool>)orderMethod.Invoke(lisbethObject, new object[] { json, false });
						   }
						   catch (Exception ex) when (
							   ex.ToString().Contains("HttpRequestException") || 
							   ex.ToString().Contains("No response from the server") ||
							   ex.ToString().Contains("Max sessions reached")
						   )
						   {
							   // Log and stop gently
							   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Attempting to stop Lisbeth gently...");
							   var stopGentlyMethod = lisbethObject.GetType().GetMethod("StopGently");
							   await (Task)stopGentlyMethod.Invoke(lisbethObject, null);
							   
							   // Log and try to exit crafting
							   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Attempting to exit crafting state...");
							   try 
							   {
								   var exitCraftingMethod = lisbethObject.GetType().GetMethod("ExitCrafting");
								   await (Task<bool>)exitCraftingMethod.Invoke(lisbethObject, null);
							   }
							   catch {}
							   
							   // Log waiting period
							   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Waiting 5 minutes before attempting restart...");
							   await Task.Delay(TimeSpan.FromMinutes(5));
							   
							   // Log and request restart
							   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Requesting Lisbeth to restart orders...");
							   var restartMethod = lisbethObject.GetType().GetMethod("RequestRestart");
							   restartMethod.Invoke(lisbethObject, new object[] { json });
							   
							   await executeWithRetry();
						   }
					   };

					   await executeWithRetry();
				   }
				
            }
        }
    ]]>
	</CodeChunk>
<CodeChunk Type="Definition" Name="AutocraftCheck">
		<![CDATA[
			public static async Task<bool> CheckAutocraftLevel(int level)
			{
				try 
				{
					string workingDirectory = Directory.GetCurrentDirectory();
					string settingsPath = Path.Combine(workingDirectory, "Settings");
					string logFilePath = Path.Combine(settingsPath, "autocraft.txt");
					
					// Create the file if it doesn't exist
					if (!File.Exists(logFilePath))
					{
						File.WriteAllText(logFilePath, "");
					}
					
					// Read content and check for craft{level}
					string content = File.ReadAllText(logFilePath);
					if (content.Contains($"craft{level}"))
					{
						return true;
					}
					
					// If we get here, we need to run the profile
					var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
					var profileDir = Path.GetDirectoryName(profilePath);
					var autoCraftPath = Path.Combine(profileDir, $"Autocraft/Lv{level}.xml");
					
					if (File.Exists(autoCraftPath))
					{
						await Coroutine.Sleep(500);
						ff14bot.NeoProfiles.NeoProfileManager.Load(autoCraftPath);
						await Coroutine.Sleep(1000);
					}
					
					return true;
				}
				catch
				{
					return true;
				}
			}
		]]>
		</CodeChunk>

		<CodeChunk Name="autocraftcheck100">
		<![CDATA[
			await CheckAutocraftLevel(100);
		]]>
		</CodeChunk>


<CodeChunk Type="Definition" Name="AutosellCheck">
		<![CDATA[
			public static async Task<bool> CheckAutosellLevel(int level)
			{
				try 
				{
					string workingDirectory = Directory.GetCurrentDirectory();
					string settingsPath = Path.Combine(workingDirectory, "Settings");
					string logFilePath = Path.Combine(settingsPath, "autosell.txt");
					
					// Create the file if it doesn't exist
					if (!File.Exists(logFilePath))
					{
						File.WriteAllText(logFilePath, "");
					}
					
					// Read content and check for sell{level}
					string content = File.ReadAllText(logFilePath);
					if (content.Contains($"sell{level}"))
					{
						return true;
					}
					
					// If we get here, we need to run the profile
					var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
					var profileDir = Path.GetDirectoryName(profilePath);
					var autoSellPath = Path.Combine(profileDir, $"Autosell/Lv{level}.xml");
					
					if (File.Exists(autoSellPath))
					{
						await Coroutine.Sleep(500);
						ff14bot.NeoProfiles.NeoProfileManager.Load(autoSellPath);
						await Coroutine.Sleep(1000);
					}
					
					return true;
				}
				catch
				{
					return true;
				}
			}
		]]>
		</CodeChunk>

		<CodeChunk Name="autosellcheck101">
		<![CDATA[
			await CheckAutosellLevel(101);
		]]>
		</CodeChunk>
		<CodeChunk Name="autosellcheck102">
		<![CDATA[
			await CheckAutosellLevel(102);
		]]>
		</CodeChunk>
<CodeChunk Name="SetLisbethJson1">
<![CDATA[
    // Try to get profile path and construct relative path from there
    var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
    var profileDir = System.IO.Path.GetDirectoryName(profilePath);
    var jsonPath = System.IO.Path.Combine(profileDir, "Lisbeth/GearSets/Everseeker.json");
    
    var json = System.IO.File.ReadAllText(jsonPath);
    var lisbeth = BotManager.Bots.FirstOrDefault(c => c.Name == "Lisbeth");
    if (lisbeth != null)
   {
       var lisbethObject = lisbeth.GetType().GetProperty("Lisbeth").GetValue(lisbeth);
       if (lisbethObject != null)
       {
           Func<Task> executeWithRetry = null;
           executeWithRetry = async () => {
               try 
               {
                   var orderMethod = lisbethObject.GetType().GetMethod("ExecuteOrders");
                   await (Task<bool>)orderMethod.Invoke(lisbethObject, new object[] { json, false });
               }
               catch (Exception ex) when (
                   ex.ToString().Contains("HttpRequestException") || 
                   ex.ToString().Contains("No response from the server") ||
                   ex.ToString().Contains("Max sessions reached")
               )
               {
                   // Log and stop gently
                   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Attempting to stop Lisbeth gently...");
                   var stopGentlyMethod = lisbethObject.GetType().GetMethod("StopGently");
                   await (Task)stopGentlyMethod.Invoke(lisbethObject, null);
                   
                   // Log and try to exit crafting
                   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Attempting to exit crafting state...");
                   try 
                   {
                       var exitCraftingMethod = lisbethObject.GetType().GetMethod("ExitCrafting");
                       await (Task<bool>)exitCraftingMethod.Invoke(lisbethObject, null);
                   }
                   catch {}
                   
                   // Log waiting period
                   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Waiting 5 minutes before attempting restart...");
                   await Task.Delay(TimeSpan.FromMinutes(5));
                   
                   // Log and request restart
                   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Requesting Lisbeth to restart orders...");
                   var restartMethod = lisbethObject.GetType().GetMethod("RequestRestart");
                   restartMethod.Invoke(lisbethObject, new object[] { json });
                   
                   await executeWithRetry();
               }
           };

           await executeWithRetry();
       }
   }
]]>
</CodeChunk>

<CodeChunk Name="SetLisbethJson2">
<![CDATA[
    // Try to get profile path and construct relative path from there
    var profilePath = ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile.Path;
    var profileDir = System.IO.Path.GetDirectoryName(profilePath);
    var jsonPath = System.IO.Path.Combine(profileDir, "Lisbeth/GearSets/7.1Materia.json");
    
    var json = System.IO.File.ReadAllText(jsonPath);
    var lisbeth = BotManager.Bots.FirstOrDefault(c => c.Name == "Lisbeth");
    if (lisbeth != null)
   {
       var lisbethObject = lisbeth.GetType().GetProperty("Lisbeth").GetValue(lisbeth);
       if (lisbethObject != null)
       {
           Func<Task> executeWithRetry = null;
           executeWithRetry = async () => {
               try 
               {
                   var orderMethod = lisbethObject.GetType().GetMethod("ExecuteOrders");
                   await (Task<bool>)orderMethod.Invoke(lisbethObject, new object[] { json, false });
               }
               catch (Exception ex) when (
                   ex.ToString().Contains("HttpRequestException") || 
                   ex.ToString().Contains("No response from the server") ||
                   ex.ToString().Contains("Max sessions reached")
               )
               {
                   // Log and stop gently
                   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Attempting to stop Lisbeth gently...");
                   var stopGentlyMethod = lisbethObject.GetType().GetMethod("StopGently");
                   await (Task)stopGentlyMethod.Invoke(lisbethObject, null);
                   
                   // Log and try to exit crafting
                   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Attempting to exit crafting state...");
                   try 
                   {
                       var exitCraftingMethod = lisbethObject.GetType().GetMethod("ExitCrafting");
                       await (Task<bool>)exitCraftingMethod.Invoke(lisbethObject, null);
                   }
                   catch {}
                   
                   // Log waiting period
                   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Waiting 5 minutes before attempting restart...");
                   await Task.Delay(TimeSpan.FromMinutes(5));
                   
                   // Log and request restart
                   ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Requesting Lisbeth to restart orders...");
                   var restartMethod = lisbethObject.GetType().GetMethod("RequestRestart");
                   restartMethod.Invoke(lisbethObject, new object[] { json });
                   
                   await executeWithRetry();
               }
           };

           await executeWithRetry();
       }
   }
]]>
</CodeChunk>
</CodeChunks>
</Profile>