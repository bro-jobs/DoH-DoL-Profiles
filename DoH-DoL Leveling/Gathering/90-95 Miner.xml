<?xml version="1.0" encoding="utf-8"?>
<!--
Angles24
-->
<Profile>
	<Name>90-95 Miner</Name>
	<KillRadius>90</KillRadius>
	
	<Order>
		      
	<LogMessage Message="The Journey Begins! Remember to Check up on me!"/>
	
	<If Condition="ClassName != ClassJobType.Miner">
		<ChangeClass Job="Miner"/>
	</If>
				
    <If Condition="ClassName == ClassJobType.Miner">
		<WaitTimer WaitTime="2"/>
		<AutoInventoryEquip/>
		<WaitTimer WaitTime="5"/>
		
		<!-- Level 90-91 -->
		<While Condition="Core.Me.Levels[ClassJobType.Miner] &lt; 95">
			<LogMessage Message="Starting the Grind to Level 95."/>
			<If Condition="not Core.Me.HasAura(46)">
				<UseInventoryItem ItemID="12668"/>
			</If>
			<WaitTimer WaitTime="2"/>
			<RunCode Name="DTFolklore"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="43878"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="43879"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="43880"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="43881"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="43882"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="43883"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="12238"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="12239"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="12240"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="12698"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="12699"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="12700"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="17838"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="17839"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="17840"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="17841"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="26808"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="26809"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="36598"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="36600"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="36601"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="36602"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="36604"/>
			<WaitTimer WaitTime="5"/>
			<UseInventoryItem ItemID="36605"/>
			<WaitTimer WaitTime="5"/>
		</While>
		<!--End Level 95-->
		
	</If>
	
	<LLoadProfile Path="../Start.xml"/>	
	
	</Order>
	<GrindAreas>
	</GrindAreas>
	<CodeChunks>
		<CodeChunk Name="MINWeapon">
			<![CDATA[
				var item = InventoryManager.FilledInventoryAndArmory.FirstOrDefault(i => i.Item.EquipmentCatagory == ItemUiCategory.Miners_Primary_Tool);
				BagSlot EquipSlot = InventoryManager.GetBagByInventoryBagId(InventoryBagId.EquippedItems)[EquipmentSlot.MainHand];
				if (item != null)
				{
					item.Move(EquipSlot);
				}
		]]>
		</CodeChunk>
		<CodeChunk Name="MINWeapon2">
			<![CDATA[
				var item = InventoryManager.FilledInventoryAndArmory.FirstOrDefault(i => i.Item.EquipmentCatagory == ItemUiCategory.Miners_Secondary_Tool);
				BagSlot EquipSlot = InventoryManager.GetBagByInventoryBagId(InventoryBagId.EquippedItems)[EquipmentSlot.OffHand];
				if (item != null)
				{
					item.Move(EquipSlot);
				}
		]]>
		</CodeChunk>
		<CodeChunk Name="Sneak">
			<![CDATA[ 
				if(!Core.Player.HasAura(47)) 
				{ 
					ff14bot.Managers.ActionManager.DoAction("Sneak",Core.Player); 
					await Coroutine.Wait(5000, () => Core.Player.HasAura(47)); 
				} 
		]]>
		</CodeChunk>
		<CodeChunk Name="Enable_Flight">
      <![CDATA[
        foreach (var plugin in PluginManager.Plugins.Where(p => p.Plugin.Name == "Enable Flight" || p.Plugin.Name == "启用飞行"))
        {
          try
          {
            if (plugin.Enabled)  {  break;  }  else  {  plugin.Enabled = true;  }
          }
          catch (Exception ex) {  }
        }
      ]]>
    </CodeChunk>
	<CodeChunk Name="Disable_Flight">
      <![CDATA[
        foreach (var plugin in PluginManager.Plugins.Where(p => p.Plugin.Name == "Enable Flight" || p.Plugin.Name == "启用飞行"))
        {
          try
          {
            if (!plugin.Enabled)  {  break;  }  else  {  plugin.Enabled = false;  }
          }
          catch (Exception ex) {  }
        }
      ]]>
    </CodeChunk>
	<CodeChunk Name="DTFolklore">
    <![CDATA[

        // Settings
        const string ChunkName = "FolkloreMiniCheck";
        
        // Logging setup
        var log = new LlamaLibrary.Logging.LLogger(ChunkName, System.Windows.Media.Colors.Pink);
        
        // Create list to store unlockable items
        var unlockableItems = new System.Collections.Generic.List<uint>();

		// Define potentially unlockable items
		var potentialItems = new System.Collections.Generic.List<uint>()
		{
			43878, 43879, 43880, 43881, 43882, 43883,
			12238, 12239, 12240, 12698, 12699, 12700,
			17838, 17839, 17840, 17841,
			26808, 26809,
			36598, 36600, 36601, 36602, 36604, 36605
		};
        
        // Check which items can be unlocked
        foreach(var itemId in potentialItems)
        {
            if (LlamaLibrary.Helpers.UIState.CanUnlockItem(itemId))
            {
                unlockableItems.Add(itemId);
            }
        }

		// Get Lisbeth instance
        var lisbeth = BotManager.Bots.FirstOrDefault(c => c.Name == "Lisbeth");
        
		// Create order objects
		var orders = new System.Collections.Generic.List<object>();
		int id = 1;
		if (unlockableItems.Count > 0)
		{
			foreach (var item in unlockableItems)
			{	
				orders.Add(new
				{
					Id = id++,
					Group = 1,
					Item = item,
					Amount = 1,
					Enabled = true,
					Type = "Exchange",
					AmountMode = "Restock"
				});

			}
		}

		orders.Add(new
			{
				Id = id++,
				Group = 2,
				Item = 12669,
				Amount = 100,
				Enabled = true,
				Type = "Exchange",
				AmountMode = "Absolute"
			});
		
		// Convert to JSON
		var json = Newtonsoft.Json.JsonConvert.SerializeObject(orders);
		
		
		if (lisbeth != null)
		{
			var lisbethObject = lisbeth.GetType().GetProperty("Lisbeth").GetValue(lisbeth);
			if (lisbethObject != null)
			{
				Func<Task> executeWithRetry = null;
				executeWithRetry = async () => {
					try 
					{
						var orderMethod = lisbethObject.GetType().GetMethod("ExecuteOrders");
						await (Task<bool>)orderMethod.Invoke(lisbethObject, new object[] { json, false });
					}
					catch (Exception ex) when (
						ex.ToString().Contains("HttpRequestException") || 
						ex.ToString().Contains("No response from the server") ||
						ex.ToString().Contains("Max sessions reached")
					)
					{
						// Log and stop gently
						ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Attempting to stop Lisbeth gently...");
						var stopGentlyMethod = lisbethObject.GetType().GetMethod("StopGently");
						await (Task)stopGentlyMethod.Invoke(lisbethObject, null);
						
						// Log and try to exit crafting
						ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Attempting to exit crafting state...");
						try 
						{
							var exitCraftingMethod = lisbethObject.GetType().GetMethod("ExitCrafting");
							await (Task<bool>)exitCraftingMethod.Invoke(lisbethObject, null);
						}
						catch {}
						
						// Log waiting period
						ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Waiting 5 minutes before attempting restart...");
						await Task.Delay(TimeSpan.FromMinutes(5));
						
						// Log and request restart
						ff14bot.Helpers.Logging.Write("[MaxSessionRestarter] Requesting Lisbeth to restart orders...");
						var restartMethod = lisbethObject.GetType().GetMethod("RequestRestart");
						restartMethod.Invoke(lisbethObject, new object[] { json });
						
						await executeWithRetry();
					}
				};

				await executeWithRetry();
			}
			
		}
    ]]>
	</CodeChunk>
	</CodeChunks>
</Profile>
