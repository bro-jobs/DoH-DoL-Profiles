<?xml version="1.0" encoding="UTF-8"?>
<!--
Authors:  Kayla / Angles24
-->
<Profile>
<Name>Crafting Carpenter to 41</Name>
<Order>

	<!-- Leave Diadem -->
	<If Condition="(WorldManager.ZoneId == 901)">
		<RunCode Name="Leave"/>
		<WaitTimer WaitTime="3"/>
		<WaitWhile Condition="not GameObjectManager.GetObjectByNPCId(1031694)"/>
	</If>

	<!-- Turn in-->
	<If Condition="WorldManager.ZoneId != 901">
		<While Condition="(HasIshgardItem() &gt; 0) or (HasIshgardGatheringMining() &gt; 0) or (HasIshgardGatheringBotanist() &gt; 0)">
			<GetTo ZoneId="886" XYZ="50.08479, -16, 168.9252"/>
			<RunCode Name="TurnIn"/>
		</While>
	</If>

	<!-- Grade 4 Skybuilders' Ink -->
	<If Condition="(Core.Me.Levels[ClassJobType.Carpenter] &gt; 20) and  (Core.Me.Levels[ClassJobType.Carpenter] &lt; 41)">
		<If Condition="ClassName != ClassJobType.Carpenter">
			<ChangeClass Job="Carpenter"/>
		</If>
		<If Condition="ClassName == ClassJobType.Carpenter">
			<AutoInventoryEquip/>
			<WaitTimer WaitTime="5"/>
			<RunCode Name="SetLisbethJson" />
		</If>
	</If>

	<!-- Turn in-->
	<If Condition="WorldManager.ZoneId != 901">
		<While Condition="(HasIshgardItem() &gt; 0) or (HasIshgardGatheringMining() &gt; 0) or (HasIshgardGatheringBotanist() &gt; 0)">
			<GetTo ZoneId="886" XYZ="50.08479, -16, 168.9252"/>
			<RunCode Name="TurnIn"/>
		</While>
	</If>

	<!-- Reload Profile -->
	<If Condition="Core.Me.Levels[ClassJobType.Carpenter] &lt; 41">
		<LLoadProfile Path="21-41 CarpenterD.xml"/>
	</If>

	<!-- Load Start -->
	<LogMessage Message="Congrats on Level 41 on Carpenter, moving on."/>
	<AutoInventoryEquip/>
	<WaitTimer WaitTime="5"/>
	<LLoadProfile Path="../Start.xml"/>

</Order>
<CodeChunks>
	<CodeChunk name="Leave">
	<![CDATA[
		if (DutyManager.InInstance)
		{
		DutyManager.LeaveActiveDuty();
		if (await Coroutine.Wait(30000, () => CommonBehaviors.IsLoading))
		{
		await Coroutine.Yield();
		await Coroutine.Wait(Timeout.Infinite, () => !CommonBehaviors.IsLoading);
		await Coroutine.Sleep(1000);
		}
		}
	]]>
	</CodeChunk>
	<CodeChunk Name="TurnIn">
	<![CDATA[
		Logging.Write("[Handin] calling");
		await LlamaLibrary.Utilities.Ishgard.Handin();
	]]>
	</CodeChunk>
	<CodeChunk Name="SetLisbethJson">
	<![CDATA[
			int amount = 23;
			int level = Core.Me.Levels[ClassJobType.Carpenter];
			int exp = (int)Experience.CurrentExperience;
			
			ff14bot.Helpers.Logging.Write($"Current level: {level}");
			ff14bot.Helpers.Logging.Write($"Current EXP: {exp}");

			amount = (level, exp) switch
			{
			(40, > 86774) => 1,
			(40, >= 18548) => 2,
			(40, >= 0) => 3,
			(39, > 92202) => 3,
			(39, >= 23936) => 4,
			(39, >= 0) => 5,
			(38, > 88490) => 5,
			(38, >= 20188) => 6,
			(38, >= 0) => 7,
			(37, > 72599) => 7,
			(37, >= 4256) => 8,
			(37, >= 0) => 9,
			(36, > 48589) => 9,
			(36, >= 0) => 10,
			(35, > 81440) => 10,
			(35, >= 12984) => 11,
			(35, >= 0) => 12,
			(34, > 38616) => 12,
			(34, >= 0) => 13,
			(33, > 56314) => 13,
			(33, >= 0) => 14,
			(32, > 64944) => 14,
			(32, >= 0) => 15,
			(31, > 68308) => 15,
			(31, >= 0) => 16,
			(30, > 61492) => 16,
			(30, >= 0) => 17,
			(29, > 51320) => 17,
			(29, >= 0) => 18,
			(28, > 39330) => 18,
			(28, >= 0) => 19,
			(27, > 19523) => 19,
			(27, >= 0) => 20,
			(26, > 0) => 20,
			(25, > 33693) => 20,
			(25, >= 0) => 21,
			(24, > 0) => 21,
			(23, > 28411) => 21,
			(23, >= 0) => 22,
			(22, > 0) => 22,
			(21, > 8232) => 22,
			(21, >= 0) => 23,
			(20, > 0) => 23,
			(19, > 0) => 23,
			(18, > 0) => 23,
			(17, > 13411) => 23,
			(17, >= 0) => 23,
			_ => amount
			};
		
		if (Core.Me.HasAura(1411)) {
			amount = (int)Math.Ceiling((amount + 1) / 2.0);
		}
		
		ff14bot.Helpers.Logging.Write($"Estimated amount of collectables needed to level to next checkpoint: {amount}");
		
		var lisbeth = BotManager.Bots.FirstOrDefault(c => c.Name == "Lisbeth");
		if (lisbeth != null)
		{
			var lisbethObject = lisbeth.GetType().GetProperty("Lisbeth").GetValue(lisbeth);
			if (lisbethObject != null)
			{
				var json = $"[{{'Group':1,'Item':31913,'Amount':{amount},'Enabled':true,'Type':'Carpenter','Collectable':false}}]";
				var orderMethod = lisbethObject.GetType().GetMethod("ExecuteOrders");
				await (Task<bool>)orderMethod.Invoke(lisbethObject, new object[] { json, false });
			}
		}
	]]>
	</CodeChunk>
</CodeChunks>
</Profile>